{"ast":null,"code":"import { supabase } from \"../utils/supabaseClient\";\n\nclass AuthService {\n  async login(email, password) {\n    console.log(`Logging in with email: ${email}`);\n    const {\n      data,\n      error\n    } = await this.withRetry(() => supabase.auth.signInWithPassword({\n      email,\n      password\n    }));\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const {\n      error\n    } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email, password, displayName) {\n    console.log(`Registering with email: ${email}`);\n    const {\n      data,\n      error\n    } = await this.withRetry(() => supabase.auth.signUp({\n      email,\n      password\n    }));\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    if (data.user) {\n      const updateError = await this.createProfile(data.user.id, displayName);\n\n      if (updateError) {\n        console.error('Error creating profile:', updateError);\n        throw updateError;\n      }\n    }\n\n    return data;\n  }\n\n  async createProfile(userId, displayName) {\n    const {\n      error\n    } = await this.withRetry(() => supabase.from('profiles').insert({\n      id: userId,\n      display_name: displayName\n    }));\n    return error;\n  }\n\n  async getCurrentUser() {\n    console.log('Getting current user');\n    const {\n      data,\n      error\n    } = await this.withRetry(() => supabase.auth.getUser());\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    const user = data.user;\n\n    if (user) {\n      const {\n        data: profile,\n        error: profileError\n      } = await this.withRetry(() => supabase.from('profiles').select('display_name').eq('id', user.id).single());\n\n      if (profileError) {\n        console.error('Error fetching user profile:', profileError);\n        throw profileError;\n      }\n\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"],\n        // Example roles, adjust as needed\n        username: profile.display_name // Use display_name as username\n\n      };\n    }\n\n    return null;\n  }\n\n  async withRetry(func) {\n    let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n\n    for (let i = 0; i < retries; i++) {\n      try {\n        return await func();\n      } catch (error) {\n        if (error.status === 429 && i < retries - 1) {\n          // 429 status code means rate limit exceeded\n          console.log(`Rate limit exceeded. Retrying in ${delay}ms...`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          delay *= 2; // Exponential backoff\n        } else {\n          if (error.status === 429) {\n            // Inform the user about the rate limit\n            throw new Error(\"Rate limit exceeded. Please try again later.\");\n          }\n\n          throw error;\n        }\n      }\n    }\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["supabase","AuthService","login","email","password","console","log","data","error","withRetry","auth","signInWithPassword","logout","signOut","register","displayName","signUp","user","updateError","createProfile","id","userId","from","insert","display_name","getCurrentUser","getUser","profile","profileError","select","eq","single","roles","username","func","retries","delay","i","status","Promise","resolve","setTimeout","Error"],"sources":["/home/massimiliano/Documents/HRplanner/src/services/auth.service.ts"],"sourcesContent":["import { supabase } from \"../utils/supabaseClient\";\nimport IUser from \"../types/user.type\";\n\nclass AuthService {\n  async login(email: string, password: string) {\n    console.log(`Logging in with email: ${email}`);\n    const { data, error } = await this.withRetry(() => \n      supabase.auth.signInWithPassword({ email, password })\n    );\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const { error } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email: string, password: string, displayName: string) {\n    console.log(`Registering with email: ${email}`);\n    const { data, error } = await this.withRetry(() => \n      supabase.auth.signUp({ email, password })\n    );\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    if (data.user) {\n      const updateError = await this.createProfile(data.user.id, displayName);\n      if (updateError) {\n        console.error('Error creating profile:', updateError);\n        throw updateError;\n      }\n    }\n\n    return data;\n  }\n\n  async createProfile(userId: string, displayName: string) {\n    const { error } = await this.withRetry(() => \n      supabase.from('profiles').insert({ id: userId, display_name: displayName })\n    );\n\n    return error;\n  }\n\n  async getCurrentUser(): Promise<IUser | null> {\n    console.log('Getting current user');\n    const { data, error } = await this.withRetry(() => supabase.auth.getUser());\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    const user = data.user;\n    if (user) {\n      const { data: profile, error: profileError } = await this.withRetry(() => \n        supabase.from('profiles').select('display_name').eq('id', user.id).single()\n      );\n\n      if (profileError) {\n        console.error('Error fetching user profile:', profileError);\n        throw profileError;\n      }\n\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"], // Example roles, adjust as needed\n        username: profile.display_name, // Use display_name as username\n      };\n    }\n\n    return null;\n  }\n\n  async withRetry(func: Function, retries = 5, delay = 1000) {\n    for (let i = 0; i < retries; i++) {\n      try {\n        return await func();\n      } catch (error: any) {\n        if (error.status === 429 && i < retries - 1) {\n          // 429 status code means rate limit exceeded\n          console.log(`Rate limit exceeded. Retrying in ${delay}ms...`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          delay *= 2; // Exponential backoff\n        } else {\n          if (error.status === 429) {\n            // Inform the user about the rate limit\n            throw new Error(\"Rate limit exceeded. Please try again later.\");\n          }\n          throw error;\n        }\n      }\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,yBAAzB;;AAGA,MAAMC,WAAN,CAAkB;EACL,MAALC,KAAK,CAACC,KAAD,EAAgBC,QAAhB,EAAkC;IAC3CC,OAAO,CAACC,GAAR,CAAa,0BAAyBH,KAAM,EAA5C;IACA,MAAM;MAAEI,IAAF;MAAQC;IAAR,IAAkB,MAAM,KAAKC,SAAL,CAAe,MAC3CT,QAAQ,CAACU,IAAT,CAAcC,kBAAd,CAAiC;MAAER,KAAF;MAASC;IAAT,CAAjC,CAD4B,CAA9B;;IAIA,IAAII,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;MACA,MAAMA,KAAN;IACD;;IAED,OAAOD,IAAP;EACD;;EAEW,MAANK,MAAM,GAAG;IACbP,OAAO,CAACC,GAAR,CAAY,aAAZ;IACA,MAAM;MAAEE;IAAF,IAAY,MAAMR,QAAQ,CAACU,IAAT,CAAcG,OAAd,EAAxB;;IAEA,IAAIL,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,oBAAd,EAAoCA,KAApC;MACA,MAAMA,KAAN;IACD;EACF;;EAEa,MAARM,QAAQ,CAACX,KAAD,EAAgBC,QAAhB,EAAkCW,WAAlC,EAAuD;IACnEV,OAAO,CAACC,GAAR,CAAa,2BAA0BH,KAAM,EAA7C;IACA,MAAM;MAAEI,IAAF;MAAQC;IAAR,IAAkB,MAAM,KAAKC,SAAL,CAAe,MAC3CT,QAAQ,CAACU,IAAT,CAAcM,MAAd,CAAqB;MAAEb,KAAF;MAASC;IAAT,CAArB,CAD4B,CAA9B;;IAIA,IAAII,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;MACA,MAAMA,KAAN;IACD;;IAED,IAAID,IAAI,CAACU,IAAT,EAAe;MACb,MAAMC,WAAW,GAAG,MAAM,KAAKC,aAAL,CAAmBZ,IAAI,CAACU,IAAL,CAAUG,EAA7B,EAAiCL,WAAjC,CAA1B;;MACA,IAAIG,WAAJ,EAAiB;QACfb,OAAO,CAACG,KAAR,CAAc,yBAAd,EAAyCU,WAAzC;QACA,MAAMA,WAAN;MACD;IACF;;IAED,OAAOX,IAAP;EACD;;EAEkB,MAAbY,aAAa,CAACE,MAAD,EAAiBN,WAAjB,EAAsC;IACvD,MAAM;MAAEP;IAAF,IAAY,MAAM,KAAKC,SAAL,CAAe,MACrCT,QAAQ,CAACsB,IAAT,CAAc,UAAd,EAA0BC,MAA1B,CAAiC;MAAEH,EAAE,EAAEC,MAAN;MAAcG,YAAY,EAAET;IAA5B,CAAjC,CADsB,CAAxB;IAIA,OAAOP,KAAP;EACD;;EAEmB,MAAdiB,cAAc,GAA0B;IAC5CpB,OAAO,CAACC,GAAR,CAAY,sBAAZ;IACA,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkB,MAAM,KAAKC,SAAL,CAAe,MAAMT,QAAQ,CAACU,IAAT,CAAcgB,OAAd,EAArB,CAA9B;;IAEA,IAAIlB,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;MACA,MAAMA,KAAN;IACD;;IAED,MAAMS,IAAI,GAAGV,IAAI,CAACU,IAAlB;;IACA,IAAIA,IAAJ,EAAU;MACR,MAAM;QAAEV,IAAI,EAAEoB,OAAR;QAAiBnB,KAAK,EAAEoB;MAAxB,IAAyC,MAAM,KAAKnB,SAAL,CAAe,MAClET,QAAQ,CAACsB,IAAT,CAAc,UAAd,EAA0BO,MAA1B,CAAiC,cAAjC,EAAiDC,EAAjD,CAAoD,IAApD,EAA0Db,IAAI,CAACG,EAA/D,EAAmEW,MAAnE,EADmD,CAArD;;MAIA,IAAIH,YAAJ,EAAkB;QAChBvB,OAAO,CAACG,KAAR,CAAc,8BAAd,EAA8CoB,YAA9C;QACA,MAAMA,YAAN;MACD;;MAED,MAAMzB,KAAK,GAAGc,IAAI,CAACd,KAAL,IAAc,EAA5B;MACA,OAAO;QACLiB,EAAE,EAAEH,IAAI,CAACG,EADJ;QAELjB,KAFK;QAGL6B,KAAK,EAAE,CAAC,WAAD,CAHF;QAGiB;QACtBC,QAAQ,EAAEN,OAAO,CAACH,YAJb,CAI2B;;MAJ3B,CAAP;IAMD;;IAED,OAAO,IAAP;EACD;;EAEc,MAATf,SAAS,CAACyB,IAAD,EAA4C;IAAA,IAA3BC,OAA2B,uEAAjB,CAAiB;IAAA,IAAdC,KAAc,uEAAN,IAAM;;IACzD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6BE,CAAC,EAA9B,EAAkC;MAChC,IAAI;QACF,OAAO,MAAMH,IAAI,EAAjB;MACD,CAFD,CAEE,OAAO1B,KAAP,EAAmB;QACnB,IAAIA,KAAK,CAAC8B,MAAN,KAAiB,GAAjB,IAAwBD,CAAC,GAAGF,OAAO,GAAG,CAA1C,EAA6C;UAC3C;UACA9B,OAAO,CAACC,GAAR,CAAa,oCAAmC8B,KAAM,OAAtD;UACA,MAAM,IAAIG,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUJ,KAAV,CAAjC,CAAN;UACAA,KAAK,IAAI,CAAT,CAJ2C,CAI/B;QACb,CALD,MAKO;UACL,IAAI5B,KAAK,CAAC8B,MAAN,KAAiB,GAArB,EAA0B;YACxB;YACA,MAAM,IAAII,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACD,MAAMlC,KAAN;QACD;MACF;IACF;EACF;;AA1Ge;;AA6GlB,eAAe,IAAIP,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}