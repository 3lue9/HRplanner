{"ast":null,"code":"import { supabase } from \"../utils/supabaseClient\";\n\nclass AuthService {\n  async login(email, password) {\n    console.log(`Logging in with email: ${email}`);\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const {\n      error\n    } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email, password) {\n    console.log(`Registering with email: ${email}`);\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async getCurrentUser() {\n    console.log('Getting current user');\n    const {\n      data: {\n        user\n      },\n      error\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    if (user) {\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"],\n        // Example roles, adjust as needed\n        username: email.split('@')[0] // Example username generation\n\n      };\n    }\n\n    return null;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["supabase","AuthService","login","email","password","console","log","data","error","auth","signInWithPassword","logout","signOut","register","signUp","getCurrentUser","user","getUser","id","roles","username","split"],"sources":["/home/massimiliano/Documents/HRplanner/src/services/auth.service.ts"],"sourcesContent":["import { supabase } from \"../utils/supabaseClient\";\nimport IUser from \"../types/user.type\";\n\nclass AuthService {\n  async login(email: string, password: string) {\n    console.log(`Logging in with email: ${email}`);\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const { error } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email: string, password: string) {\n    console.log(`Registering with email: ${email}`);\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async getCurrentUser(): Promise<IUser | null> {\n    console.log('Getting current user');\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    if (user) {\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"], // Example roles, adjust as needed\n        username: email.split('@')[0] // Example username generation\n      };\n    }\n\n    return null;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,yBAAzB;;AAGA,MAAMC,WAAN,CAAkB;EACL,MAALC,KAAK,CAACC,KAAD,EAAgBC,QAAhB,EAAkC;IAC3CC,OAAO,CAACC,GAAR,CAAa,0BAAyBH,KAAM,EAA5C;IACA,MAAM;MAAEI,IAAF;MAAQC;IAAR,IAAkB,MAAMR,QAAQ,CAACS,IAAT,CAAcC,kBAAd,CAAiC;MAC7DP,KAD6D;MAE7DC;IAF6D,CAAjC,CAA9B;;IAKA,IAAII,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;MACA,MAAMA,KAAN;IACD;;IAED,OAAOD,IAAP;EACD;;EAEW,MAANI,MAAM,GAAG;IACbN,OAAO,CAACC,GAAR,CAAY,aAAZ;IACA,MAAM;MAAEE;IAAF,IAAY,MAAMR,QAAQ,CAACS,IAAT,CAAcG,OAAd,EAAxB;;IAEA,IAAIJ,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,oBAAd,EAAoCA,KAApC;MACA,MAAMA,KAAN;IACD;EACF;;EAEa,MAARK,QAAQ,CAACV,KAAD,EAAgBC,QAAhB,EAAkC;IAC9CC,OAAO,CAACC,GAAR,CAAa,2BAA0BH,KAAM,EAA7C;IACA,MAAM;MAAEI,IAAF;MAAQC;IAAR,IAAkB,MAAMR,QAAQ,CAACS,IAAT,CAAcK,MAAd,CAAqB;MACjDX,KADiD;MAEjDC;IAFiD,CAArB,CAA9B;;IAKA,IAAII,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;MACA,MAAMA,KAAN;IACD;;IAED,OAAOD,IAAP;EACD;;EAEmB,MAAdQ,cAAc,GAA0B;IAC5CV,OAAO,CAACC,GAAR,CAAY,sBAAZ;IACA,MAAM;MACJC,IAAI,EAAE;QAAES;MAAF,CADF;MAEJR;IAFI,IAGF,MAAMR,QAAQ,CAACS,IAAT,CAAcQ,OAAd,EAHV;;IAKA,IAAIT,KAAJ,EAAW;MACTH,OAAO,CAACG,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;MACA,MAAMA,KAAN;IACD;;IAED,IAAIQ,IAAJ,EAAU;MACR,MAAMb,KAAK,GAAGa,IAAI,CAACb,KAAL,IAAc,EAA5B;MACA,OAAO;QACLe,EAAE,EAAEF,IAAI,CAACE,EADJ;QAELf,KAFK;QAGLgB,KAAK,EAAE,CAAC,WAAD,CAHF;QAGiB;QACtBC,QAAQ,EAAEjB,KAAK,CAACkB,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAJL,CAIyB;;MAJzB,CAAP;IAMD;;IAED,OAAO,IAAP;EACD;;AAhEe;;AAmElB,eAAe,IAAIpB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}