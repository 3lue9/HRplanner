{"ast":null,"code":"import { supabase } from \"../utils/supabaseClient\";\n\nclass AuthService {\n  async login(email, password) {\n    console.log(`Logging in with email: ${email}`);\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const {\n      error\n    } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email, password, displayName) {\n    console.log(`Registering with email: ${email}`);\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    if (data.user) {\n      const updateError = await this.createProfile(data.user.id, displayName);\n\n      if (updateError) {\n        console.error('Error creating profile:', updateError);\n        throw updateError;\n      }\n    }\n\n    return data;\n  }\n\n  async createProfile(userId, displayName) {\n    const {\n      error\n    } = await supabase.from('profiles').insert({\n      id: userId,\n      display_name: displayName\n    });\n    return error;\n  }\n\n  async getCurrentUser() {\n    console.log('Getting current user');\n    const {\n      data: {\n        user\n      },\n      error\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    if (user) {\n      // Fetch the user's profile to get the display name\n      const {\n        data: profile,\n        error: profileError\n      } = await supabase.from('profiles').select('display_name').eq('id', user.id).single();\n\n      if (profileError) {\n        console.error('Error fetching user profile:', profileError);\n        throw profileError;\n      }\n\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"],\n        // Example roles, adjust as needed\n        username: profile.display_name // Use display_name as username\n\n      };\n    }\n\n    return null;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["supabase","AuthService","login","email","password","console","log","data","error","auth","signInWithPassword","logout","signOut","register","displayName","signUp","user","updateError","createProfile","id","userId","from","insert","display_name","getCurrentUser","getUser","profile","profileError","select","eq","single","roles","username"],"sources":["/home/massimiliano/Documents/HRplanner/src/services/auth.service.ts"],"sourcesContent":["import { supabase } from \"../utils/supabaseClient\";\nimport IUser from \"../types/user.type\";\n\nclass AuthService {\n  async login(email: string, password: string) {\n    console.log(`Logging in with email: ${email}`);\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      console.error('Error logging in:', error);\n      throw error;\n    }\n\n    return data;\n  }\n\n  async logout() {\n    console.log('Logging out');\n    const { error } = await supabase.auth.signOut();\n\n    if (error) {\n      console.error('Error logging out:', error);\n      throw error;\n    }\n  }\n\n  async register(email: string, password: string, displayName: string) {\n    console.log(`Registering with email: ${email}`);\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (error) {\n      console.error('Error signing up:', error);\n      throw error;\n    }\n\n    if (data.user) {\n      const updateError = await this.createProfile(data.user.id, displayName);\n      if (updateError) {\n        console.error('Error creating profile:', updateError);\n        throw updateError;\n      }\n    }\n\n    return data;\n  }\n\n  async createProfile(userId: string, displayName: string) {\n    const { error } = await supabase.from('profiles').insert({\n      id: userId,\n      display_name: displayName,\n    });\n\n    return error;\n  }\n\n  async getCurrentUser(): Promise<IUser | null> {\n    console.log('Getting current user');\n    const {\n      data: { user },\n      error,\n    } = await supabase.auth.getUser();\n\n    if (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n\n    if (user) {\n      // Fetch the user's profile to get the display name\n      const { data: profile, error: profileError } = await supabase\n        .from('profiles')\n        .select('display_name')\n        .eq('id', user.id)\n        .single();\n\n      if (profileError) {\n        console.error('Error fetching user profile:', profileError);\n        throw profileError;\n      }\n\n      const email = user.email || '';\n      return {\n        id: user.id,\n        email,\n        roles: [\"ROLE_USER\"], // Example roles, adjust as needed\n        username: profile.display_name, // Use display_name as username\n      };\n    }\n\n    return null;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}